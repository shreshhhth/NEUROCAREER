"use server"

import { db } from "@/lib/prisma";
import { auth } from "@clerk/nextjs/server";
import { GoogleGenerativeAI } from "@google/generative-ai";


//Google generate AI instance 
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY)
//Defining model for genAI
const model = genAI.getGenerativeModel({
    model: "gemini-1.5-flash",
})

export async function generateQuiz() {
    const { userId } = await auth();

    if (!userId) throw new Error("Unauthorized");

    const user = await db.user.findUnique({
        where: {
            clerkUserId: userId,
        }
    })

    if (!user) throw new Error("User not found");

    try {


        const prompt = `
        Generate 10 technical interview questions for a ${user.industry
            } professional${user.skills?.length ? ` with expertise in ${user.skills.join(", ")}` : ""
            }.
    
        Each question should be multiple choice with 4 options.
        
    Return the response in this JSON format only, no additional text:
    {
      "questions": [
        {
          "question": "string",
          "options": ["string", "string", "string", "string"],
          "correctAnswer": "string",
          "explanation": "string"
          }
          ]
          }
          `;
        const result = await model.generateContent(prompt);
        const response = result.response;

        //After generating the response in the format mentioned in the promp, now we fetch the text from inside of it
        const text = response.text()


        const cleanedText = text.replace(/```(?:json)?\n?/g, "").trim()

        const quiz = JSON.parse(cleanedText);

        return quiz.questions;

    } catch (error) {
        console.error("Error generating the quiz", error)
        throw new Error("Failed to generate quiz questions")
    }

}


export async function saveQuizResult(questions, answers, score) {
    const { userId } = await auth();

    if (!userId) throw new Error("Unauthorized");

    const user = await db.user.findUnique({
        where: {
            clerkUserId: userId,
        }
    })

    if (!user) throw new Error("User not found");

    //Saving the gemini generated questions in variable
    const questionResult = questions.map((q, index) => ({
        question: q.question,
        answer: q.correctAnswer,
        userAnswer: answers[index],
        isCorrect: q.correctAnswer === answers[index],
        explanation: q.explanation,

    }))

    //For improvement tips to be generated by the Gemini, we use the wrong answers submitted by the user
    const wrongAnswers = questionResult.filter((q) => !q.isCorrect)

    //Variable to store improvement tip
    let improvementTip = null;

    if (wrongAnswers.length > 0) {
        const wrongQuestionsText = wrongAnswers.map((q) => `Question: "${q.question}"\nUser Answer: "${q.userAnswer}"`).join("\n\n")

        const improvementPrompt = `
            The user got the following ${user.industry} technical interview questions wrong:

            ${wrongQuestionsText}

            Based on these mistakes, provide a concise, specific improvement tip.
            Focus on the knowledge gaps revealed by these wrong answers.
            Keep the response under 2 sentences and make it encouraging.
            Don't explicitly mention the mistakes, instead focus on what to learn/practice.
        `

        try {
            const result = await model.generateContent(improvementPrompt);
            const response = result.response;

            //After generating the response in the format mentioned in the promp, now we fetch the text from inside of it
            improvementTip = response.text().trim()

        } catch (error) {
            console.error("Error generating improvement tip:", error)
        }


    }
    //Saving all the data in the database
    try {
        const assessment = await db.Assessments.create({
            data: {
                userId: user.id,
                quizScore: score,
                questions: questionResult,
                category: "Technical",
                improvementTip,
            }
        })
        return assessment;
    } catch (error) {
        console.error("Error saving quiz result:", error)
        throw new Error("Failed to save quiz result")
    }
}


export async function getAssessments() {
    const { userId } = await auth();

    if (!userId) throw new Error("Unauthorized");

    const user = await db.user.findUnique({
        where: {
            clerkUserId: userId,
        }
    })

    if (!user) throw new Error("User not found");

    try {
        const assessments = await db.Assessments.findMany({
            where: {
                userId: user.id,
            },
            orderBy: {
                createdAt: "asc"
            }
        })
        return assessments;
    } catch (error) {
        console.error("Error fetching Assessment:", error)
        throw new Error("Failed to fetch user assessment")
    }
}
